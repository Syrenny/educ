# Documentation: https://docs.astral.sh/uv/guides/integration/docker/#configuring-watch-with-docker-compose
# Example source: https://github.com/astral-sh/uv-docker-example/blob/main/Dockerfile

FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04

RUN apt update && apt install -y \
    python3.11 python3.11-dev python3.11-venv python3-pip \
    curl git build-essential libffi-dev \
    && ln -sf python3.11 /usr/bin/python3 \
    && python3 -m pip install --upgrade pip \
    && python3 -m pip install uv

WORKDIR /workspace
ENV UV_COMPILE_BYTECODE=1
ENV UV_LINK_MODE=copy

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
ADD . /workspace
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# Place executables in the environment at the front of the path
ENV PATH="/workspace/.venv/bin:$PATH"

# Reset the entrypoint, don't invoke `uv`
ENTRYPOINT []

EXPOSE 8000

CMD ["uvicorn", "server.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]
